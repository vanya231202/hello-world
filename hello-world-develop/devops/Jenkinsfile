pipeline {
    agent {
        label 'node2-jenkins-slave'
    }
    tools { 
        maven '/opt/maven/apache-maven-3.6.3' 
        jdk 'jdk8' 
    }
    environment {
        SONARQUBE_TOKEN_ID = credentials("sonarqube-token-helloworld-maven-app")
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nx.tehno.top"
        // Nexus Repository where we will upload the artifact
        NEXUS_REPOSITORY = "Test-Maven-Snapshot"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
        // Jenkins credentials for Nexus Docker Registry
        DOCKER_TAG = "${getLatestCommitId()}"
        //NEXUS_DOCKER_REGISTRY_HOST = "134.209.238.66:85"
        NEXUS_DOCKER_REGISTRY_HOST = "nx.tehno.top"
        NEXUS_DOCKER_REGISTRY_CREDS = credentials('nexus-docker-registry-user')
        CONTAINER_NAME = "hello-world-app"
        K8S_CLIENT_IP_ADDRESS = "18.195.96.234"
    }
    stages {
        stage ('Initialize') {
            steps {
                // Path where installed maven ( mvn )
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                    cd ~
                    printenv
                '''
            }
        }

        
        stage ('Build') {
            steps {
          //      sh "mvn clean  -DskipTests=true"
                sh "mvn install -DskipTests=true -e -X"
                sh "mvn package -DskipTests=true -e -X"
         //       sh 'mvn -Dmaven.test.failure.ignore=true install'
                sh """
                  cd ~
                  printenv
                """
            }
        }


        stage ('Test Code - SonarQube') {
            steps {
                sh """
                  mvn sonar:sonar \
                    -Dsonar.projectKey=maven-project \
                    -Dsonar.host.url=http://sq.tehno.top \
                    -Dsonar.login=${SONARQUBE_TOKEN_ID}
                   """
            }
        }
        
        
        stage('Test') { 
            steps {
                sh 'mvn test'
                sh """
                  cd ~
                  printenv
                """
            }
            // If the maven build succeeded, archive the JUnit test reports for display in the Jenkins web UI.
            // This command generates a JUnit XML report, which is saved to the target/surefire-reports directory
            // (within the /var/jenkins_home/workspace/simple-java-maven-app directory in the Jenkins container).
        //    post {
       //         success {
        //            junit '/var/jenkins/workspace/Deploy_Pipeline_On_Tomcat_VM/webapp/target/surefire-reports/*.xml' 
        //        }
       //     }
        }
        
        stage("Publish to Nexus Repository Manager") {
          steps {
              sh """
                   cd ~
                   printenv
              """
              script {

                  // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                  pom = readMavenPom file: "pom.xml";
                  echo "*** packaging: group: ${pom.groupId}, artifactId: ${pom.artifactId}, version: ${pom.version}, packaging: ${pom.packaging}";
                  // Find built artifact under target folder
                  //def filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                  def filesByGlob = findFiles(glob: "**/target/*.war");
                  filesByGlob.each { f ->
                    echo """
                    name: ${f.name}   path: ${f.path}   directory: ${f.directory}
                    """
                    }

                  //filesByGlob = findFiles(glob: "**/${pom.version}/*${pom.version}.${pom.packaging}");
                  // Print some info from the artifact found
                  echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                  // Extract the path from the File found
                  artifactPath = filesByGlob[0].path;
                  // Assign to a boolean response verifying If the artifact name exists
                  artifactExists = fileExists artifactPath;
                  if(artifactExists) {
                      echo "*** File artifactPath: ${artifactPath}, groupId: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                      nexusArtifactUploader(
                          nexusVersion: NEXUS_VERSION,
                          protocol: NEXUS_PROTOCOL,
                          nexusUrl: NEXUS_URL,
                          groupId: pom.groupId,
                          version: pom.version,
                          repository: NEXUS_REPOSITORY,
                          credentialsId: NEXUS_CREDENTIAL_ID,
                          artifacts: [
/*                            // Artifact generated such as .jar, .ear and .war files.
                             [artifactId: pom.artifactId,
                             classifier: 'debug',
                             file: artifactPath,
                             type: pom.packaging], */

                             [artifactId: pom.artifactId,
                             classifier: 'debug',
                             file: "webapp/target/webapp.war",
                             type: "war"],

                              [artifactId: pom.artifactId,
                              classifier: 'debug',
                              file: "server/target/server.jar",
                              type: "jar"],

                               // Lets upload the pom.xml file for additional information for Transitive dependencies
                              [artifactId: pom.artifactId,
                              classifier: 'debug',
                              file: "pom.xml",
                              type: "pom"]
                          ]
                      );
                  } else {
                      error "*** File: ${artifactPath}, could not be found";
                  }
              }
          }
        }


		stage('Docker - Build'){

			steps{
			   sh 'cd $WORKSPACE'
			   sh 'echo "Service user is $NEXUS_DOCKER_REGISTRY_CREDS_USR"'
               sh 'echo "Service password is $NEXUS_DOCKER_REGISTRY_CREDS_PSW"'
			   sh 'docker login ${NEXUS_DOCKER_REGISTRY_HOST} -u $NEXUS_DOCKER_REGISTRY_CREDS_USR -p $NEXUS_DOCKER_REGISTRY_CREDS_PSW'
			   sh "docker build . -f ./devops/Dockerfile -t ${NEXUS_DOCKER_REGISTRY_HOST}/${CONTAINER_NAME}:$BUILD_NUMBER"
			}
		}

		stage('Docker Push to Nexus Docker Registry'){
			steps{
			   sh "docker push ${NEXUS_DOCKER_REGISTRY_HOST}/${CONTAINER_NAME}:$BUILD_NUMBER"
			}
		}


       stage('Deploy to DevDockerHost'){
         steps{
//           sshagent(['dockerhost-dev']) {
//              sh "ssh ec2-user@${DOCKERHOST_IP_ADDRESS} docker rm -f ${CONTAINER_NAME}"
//              sh "ssh ec2-user@${DOCKERHOST_IP_ADDRESS} docker run -d -p 8080:8080 --name ${CONTAINER_NAME} ${NEXUS_DOCKER_REGISTRY_HOST}/${CONTAINER_NAME}:$BUILD_NUMBER"
           script {
               def inspectExitCode = sh script: "docker inspect ${CONTAINER_NAME}", returnStatus: true
               echo "inspectExitCode is ${inspectExitCode}"
               if (inspectExitCode == 0) {
                 sh "docker rm -f ${CONTAINER_NAME}"
                 sh "docker run -d -p 8080:8080 --name ${CONTAINER_NAME} ${NEXUS_DOCKER_REGISTRY_HOST}/${CONTAINER_NAME}:$BUILD_NUMBER"
               } else {
                  sh "docker run -d -p 8080:8080 --name ${CONTAINER_NAME} ${NEXUS_DOCKER_REGISTRY_HOST}/${CONTAINER_NAME}:$BUILD_NUMBER"
               }
//           }
           }
         }
       }


       stage('Deploy to K8s'){
          steps{
             sh """
                  sed -i "s/hwapp-docker-tag/$BUILD_NUMBER/" devops/k8s-deployments/deployment.yml
             """
             sshagent(['k8s-ec2-client']) {

               sh "hostname"
               sh "pwd"
               sh "scp -o StrictHostKeyChecking=no devops/k8s-deployments/deployment.yml eks@${K8S_CLIENT_IP_ADDRESS}:/home/eks/hwapp/"
               sh "ssh eks@${K8S_CLIENT_IP_ADDRESS} kubectl apply -f /home/eks/hwapp/deployment.yml"

               sh "scp -o StrictHostKeyChecking=no devops/k8s-deployments/service.yml eks@${K8S_CLIENT_IP_ADDRESS}:/home/eks/hwapp/"
               sh "ssh eks@${K8S_CLIENT_IP_ADDRESS} kubectl apply -f /home/eks/hwapp/service.yml"
             }
          }
       }

    }
}

def getLatestCommitId(){
	def commitId = sh returnStdout: true, script: 'git rev-parse HEAD'
	return commitId
}